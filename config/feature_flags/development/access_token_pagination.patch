diff --git a/app/controllers/concerns/render_access_tokens.rb b/app/controllers/concerns/render_access_tokens.rb
index 43e4686e66f9..80b4fc0a9673 100644
--- a/app/controllers/concerns/render_access_tokens.rb
+++ b/app/controllers/concerns/render_access_tokens.rb
@@ -6,10 +6,8 @@ module RenderAccessTokens
   def active_access_tokens
     tokens = finder(state: 'active', sort: 'expires_at_asc_id_desc').execute.preload_users
 
-    if Feature.enabled?('access_token_pagination')
-      tokens = tokens.page(page)
-      add_pagination_headers(tokens)
-    end
+    tokens = tokens.page(page)
+    add_pagination_headers(tokens)
 
     represent(tokens)
   end
diff --git a/spec/support/shared_examples/requests/access_tokens_controller_shared_examples.rb b/spec/support/shared_examples/requests/access_tokens_controller_shared_examples.rb
index ec46c4a9ed8b..41527b9824d0 100644
--- a/spec/support/shared_examples/requests/access_tokens_controller_shared_examples.rb
+++ b/spec/support/shared_examples/requests/access_tokens_controller_shared_examples.rb
@@ -46,18 +46,6 @@
     end
   end
 
-  context "when access_token_pagination feature flag is disabled" do
-    before do
-      stub_feature_flags(access_token_pagination: false)
-      create(:personal_access_token, user: access_token_user)
-    end
-
-    it "returns all tokens in system" do
-      get_access_tokens_with_page
-      expect(assigns(:active_access_tokens).count).to eq(2)
-    end
-  end
-
   context "when tokens returned are ordered" do
     let(:expires_1_day_from_now) { 1.day.from_now.to_date }
     let(:expires_2_day_from_now) { 2.days.from_now.to_date }
