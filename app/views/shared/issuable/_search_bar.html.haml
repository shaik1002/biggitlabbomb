- type = local_assigns.fetch(:type)
- show_sorting_dropdown = local_assigns.fetch(:show_sorting_dropdown, true)
- disable_target_branch = local_assigns.fetch(:disable_target_branch, false)
- disable_releases = local_assigns.fetch(:disable_releases, false)
- disable_environments = local_assigns.fetch(:disable_environments, false)
- placeholder = local_assigns[:placeholder] || _('Search or filter resultsâ€¦')
- block_css_class = type != :productivity_analytics ? 'row-content-block second-block' : ''

.issues-filters
  .issues-details-filters.filtered-search-block.gl-flex.gl-flex-direction-column.gl-lg-flex-direction-row.gl-gap-3{ class: block_css_class }
    .gl-flex.gl-flex-direction-column.gl-md-flex-direction-row.gl-flex-grow-1.gl-w-full
      = form_tag page_filter_path, method: :get, class: 'filter-form js-filter-form gl-w-full' do
        - if params[:search].present?
          = hidden_field_tag :search, params[:search]
        - if @can_bulk_update
          .check-all-holder.gl-hidden.sm:gl-block.hidden.gl-float-left.gl-mr-3.gl-leading-36
            = render Pajamas::CheckboxTagComponent.new(name: 'check-all-issues', value: nil) do |c|
              - c.with_label do
                %span.gl-sr-only
                  = _('Select all')
        .issues-other-filters.filtered-search-wrapper.gl-flex.gl-flex-direction-column.gl-md-flex-direction-row
          .filtered-search-box
            - if type != :boards
              - text = tag.span(sprite_icon('history')) + tag.span(_('Recent searches'), class: "gl-sr-only")
              = dropdown_tag(text,
                options: { wrapper_class: "filtered-search-history-dropdown-wrapper",
                toggle_class: "gl-button btn btn-default filtered-search-history-dropdown-toggle-button",
                dropdown_class: "filtered-search-history-dropdown",
                content_class: "filtered-search-history-dropdown-content" }) do
                .js-filtered-search-history-dropdown{ data: { full_path: search_history_storage_prefix } }
            .filtered-search-box-input-container.droplab-dropdown
              .scroll-container
                %ul.tokens-container.list-unstyled
                  %li.input-token
                    %input.form-control.filtered-search{ search_filter_input_options(type, placeholder) }
              #js-dropdown-hint.filtered-search-input-dropdown-menu.dropdown-menu.hint-dropdown
                %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                  %li.filter-dropdown-item{ data: {hint: "#{'{{hint}}'}", tag: "#{'{{tag}}'}", action: "#{'{{hint === \'search\' ? \'submit\' : \'\' }}'}" } }
                    %button.btn.btn-link{ type: 'button' }
                      -# Encapsulate static class name `{{icon}}` inside #{} to bypass
                      -# haml lint's ClassAttributeWithStaticValue
                      %svg
                        %use{ 'xlink:href': "#{'{{icon}}'}" }
                      %span.js-filter-hint
                        {{formattedKey}}
              #js-dropdown-operator.filtered-search-input-dropdown-menu.dropdown-menu
                %ul.filter-dropdown{ data: { dropdown: true, dynamic: true } }
                  %li.filter-dropdown-item{ data: { value: "{{ title }}" } }
                    %button.btn.btn-link{ type: 'button' }
                      {{ title }}
                      %span.btn-helptext
                        {{ help }}
              #js-dropdown-author.filtered-search-input-dropdown-menu.dropdown-menu
                - if current_user
                  %ul{ data: { dropdown: true } }
                    = render 'shared/issuable/user_dropdown_item',
                      user: current_user
                %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                  = render 'shared/issuable/user_dropdown_item',
                    user: User.new(username: '{{username}}', name: '{{name}}'),
                    avatar: { lazy: true, url: '{{avatar_url}}' }
              #js-dropdown-assignee.filtered-search-input-dropdown-menu.dropdown-menu
                %ul{ data: { dropdown: true } }
                  %li.filter-dropdown-item{ data: { value: 'None' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('None')
                  %li.filter-dropdown-item{ data: { value: 'Any' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('Any')
                  %li.divider.droplab-item-ignore
                  - if current_user
                    = render 'shared/issuable/user_dropdown_item',
                      user: current_user
                %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                  = render 'shared/issuable/user_dropdown_item',
                    user: User.new(username: '{{username}}', name: '{{name}}'),
                    avatar: { lazy: true, url: '{{avatar_url}}' }
              #js-dropdown-reviewer.filtered-search-input-dropdown-menu.dropdown-menu
                %ul{ data: { dropdown: true } }
                  %li.filter-dropdown-item{ data: { value: 'None' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('None')
                  %li.filter-dropdown-item{ data: { value: 'Any' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('Any')
                  %li.divider.droplab-item-ignore
                  - if current_user
                    = render 'shared/issuable/user_dropdown_item',
                      user: current_user
                %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                  = render 'shared/issuable/user_dropdown_item',
                    user: User.new(username: '{{username}}', name: '{{name}}'),
                    avatar: { lazy: true, url: '{{avatar_url}}' }
              = render_if_exists 'shared/issuable/approver_dropdown'
              = render_if_exists 'shared/issuable/approved_by_dropdown'
              = render_if_exists 'shared/issuable/merge_user_dropdown'
              #js-dropdown-milestone.filtered-search-input-dropdown-menu.dropdown-menu
                %ul{ data: { dropdown: true } }
                  %li.filter-dropdown-item{ data: { value: 'None' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('None')
                  %li.filter-dropdown-item{ data: { value: 'Any' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('Any')
                  %li.filter-dropdown-item{ data: { value: 'Upcoming' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('Upcoming')
                  %li.filter-dropdown-item{ data: { value: 'Started' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('Started')
                  %li.divider.droplab-item-ignore
                %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                  %li.filter-dropdown-item
                    %button.btn.btn-link.js-data-value{ type: 'button' }
                      {{title}}
              = render_if_exists 'shared/issuable/filter_iteration', type: type
              - unless disable_releases
                #js-dropdown-release.filtered-search-input-dropdown-menu.dropdown-menu
                  %ul{ data: { dropdown: true } }
                    %li.filter-dropdown-item{ data: { value: 'None' } }
                      %button.btn.btn-link{ type: 'button' }
                        = _('None')
                    %li.filter-dropdown-item{ data: { value: 'Any' } }
                      %button.btn.btn-link{ type: 'button' }
                        = _('Any')
                    %li.divider.droplab-item-ignore
                  %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                    %li.filter-dropdown-item
                      %button.btn.btn-link.js-data-value{ type: 'button' }
                        {{title}}
              #js-dropdown-label.filtered-search-input-dropdown-menu.dropdown-menu
                %ul{ data: { dropdown: true } }
                  %li.filter-dropdown-item{ data: { value: 'None' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('None')
                  %li.filter-dropdown-item{ data: { value: 'Any' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('Any')
                  %li.divider.droplab-item-ignore
                %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                  %li.filter-dropdown-item
                    %button.btn.btn-link{ type: 'button' }
                      %span.dropdown-label-box{ style: 'background: {{color}}' }
                      %span.label-title.js-data-value
                        {{title}}
              #js-dropdown-my-reaction.filtered-search-input-dropdown-menu.dropdown-menu
                %ul{ data: { dropdown: true } }
                  %li.filter-dropdown-item{ data: { value: 'None' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('None')
                  %li.filter-dropdown-item{ data: { value: 'Any' } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('Any')
                  %li.divider.droplab-item-ignore
                %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                  %li.filter-dropdown-item
                    %button.btn.btn-link{ type: 'button' }
                      %gl-emoji
                      %span.js-data-value.gl-ml-3
                        {{name}}
              #js-dropdown-wip.filtered-search-input-dropdown-menu.dropdown-menu
                %ul.filter-dropdown{ data: { dropdown: true } }
                  %li.filter-dropdown-item{ data: { value: 'yes', capitalize: true } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('Yes')
                  %li.filter-dropdown-item{ data: { value: 'no', capitalize: true } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('No')
              - if ::Feature.enabled?(:mr_approved_filter, type: :ops)
                #js-dropdown-approved.filtered-search-input-dropdown-menu.dropdown-menu
                  %ul.filter-dropdown{ data: { dropdown: true } }
                    %li.filter-dropdown-item{ data: { value: 'yes', capitalize: true } }
                      %button.btn.btn-link{ type: 'button' }
                        = _('Yes')
                    %li.filter-dropdown-item{ data: { value: 'no', capitalize: true } }
                      %button.btn.btn-link{ type: 'button' }
                        = _('No')
              #js-dropdown-confidential.filtered-search-input-dropdown-menu.dropdown-menu
                %ul.filter-dropdown{ data: { dropdown: true } }
                  %li.filter-dropdown-item{ data: { value: 'yes', capitalize: true } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('Yes')
                  %li.filter-dropdown-item{ data: { value: 'no', capitalize: true } }
                    %button.btn.btn-link{ type: 'button' }
                      = _('No')
              - unless disable_target_branch
                #js-dropdown-target-branch.filtered-search-input-dropdown-menu.dropdown-menu
                  %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                    %li.filter-dropdown-item
                      %button.btn.btn-link.js-data-value.monospace
                        {{title}}
                #js-dropdown-source-branch.filtered-search-input-dropdown-menu.dropdown-menu
                  %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                    %li.filter-dropdown-item
                      %button.btn.btn-link.js-data-value.monospace
                        {{title}}
              - unless disable_environments
                #js-dropdown-environment.filtered-search-input-dropdown-menu.dropdown-menu
                  %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                    %li.filter-dropdown-item
                      %button.btn.btn-link.js-data-value{ type: 'button' }
                        {{title}}

              = render_if_exists 'shared/issuable/filter_weight', type: type

              = render_if_exists 'shared/issuable/filter_epic', type: type

            = render Pajamas::ButtonComponent.new(category: :tertiary, size: :small, icon: 'clear', icon_classes: "clear-search-icon", button_options: { class: 'clear-search hidden gl-align-self-center gl-mr-1 has-tooltip', title: _('Clear') })
    .filter-dropdown-container.gl-flex.gl-flex-direction-column.gl-md-flex-direction-row.gl-align-items-flex-start
      - if type != :productivity_analytics && show_sorting_dropdown
        = render 'shared/issuable/sort_dropdown'
